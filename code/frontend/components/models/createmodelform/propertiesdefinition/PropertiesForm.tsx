import React, { useContext, useState } from "react";
// import Image from "next/image";
import { Attribute, Property ,Asset} from "@/app/api/_utils/types";
import PropertyInputColumn from "./PropertyInputColumn";
import AddPropertyButton from "./AddPropertyButton";
import { Context } from "../CreateModelForm";
import { BackendConnector,PostConfig } from "@/app/api/_utils/connector";

interface PropertiesFormContext {
    factoryId: string;
    modelId: string;
    attributes: Attribute[];
    setAttributes: React.Dispatch<React.SetStateAction<Attribute[]>>;
    properties: Property[];
    asset: Asset;
    setAsset: React.Dispatch<React.SetStateAction<Asset>>;
    setProperties: React.Dispatch<React.SetStateAction<Property[]>>;
    nextPage: () => void;
}

const PropertiesForm = () => {
    const contextValue = useContext(Context) as PropertiesFormContext;
    const [inputFields, setInputFields] = useState<Property[]>([
        {
            propertyId:"",
            factoryId: "",
            assetId:"",
            modelId: "",
            measurementId: "",
            name: "",
            unit: "",
            generatorType: "",
        },
    ]);
    console.log(contextValue.asset);
    const handleSubmit = async () => {
        contextValue?.nextPage();
        
        const uniqueNames: Record<string, boolean> = {};
        const updatedProperties: Property[] = [];
    
        const uniqueProperties = contextValue.properties.filter(property => {
            if (!uniqueNames[property.name]) {
                uniqueNames[property.name] = true;
                return true;
            }
            return false;
        });
    
        for (const property of uniqueProperties) {
            try {
                const payload = {
                    ...property,
                    assetId: contextValue.asset.assetId,
                    factoryId: contextValue.asset.factoryId,
                }
                const config = await BackendConnector.post<Property>({
                    resource: "properties",
                    payload: payload
                });
    
                if (config) {
                    updatedProperties.push(config);
                } else {
                    updatedProperties.push(property);
                }
            } catch (error) {
                console.error(error);
                updatedProperties.push(property);
            }
        }
    
        contextValue.setProperties(updatedProperties);
    }
    
    
    const [invalidProperty, setInvalidProperty] = useState(false);

    const handleNextPageButton = (
        event: React.MouseEvent<HTMLButtonElement>,
    ) => {
        event.preventDefault();
        if (
            contextValue?.properties.length <= 1 &&
            contextValue?.properties.some(
                (property) => property.generatorType === "",
            )
        ) {
            setInvalidProperty(true);
            return;
        }
        contextValue?.nextPage();
    };
   const  handleNext = ( event: React.MouseEvent<HTMLButtonElement> )=> {
        handleNextPageButton(event); 
         handleSubmit();  
        
    };

    return (
        <div className="flex flex-row gap-x-24 mt-4 gap-y-2">
            <form>
                <div className="flex flex-col w-full gap-y-3">
                    <PropertyInputColumn
                        inputFields={inputFields}
                        properties={contextValue?.properties}
                        setProperties={contextValue?.setProperties}
                        invalidProperty={invalidProperty}
                        setInvalidProperty={setInvalidProperty}
                    />
                    <AddPropertyButton setInputFields={setInputFields} />
                </div>
            </form>
            <section className="flex flex-row w-[30%] gap-y-3 gap-x-4">
                <div className="flex flex-col gap-y-2">
                    <h1 className="text-xl font-semibold text-[#494949]">
                        Define your properties
                    </h1>
                    <p className="text-base font-medium text-[#494949]">
                        <span className="text-MainBlue font-semibold">
                            Properties
                        </span>{" "}
                        are qualities of a model with values that change in the
                        simulation. You can define properties with a type, unit,
                        and generator function.
                    </p>

                    <h1 className="text-xl font-semibold text-[#494949] mt-3">
                        Generator functions
                    </h1>
                    <p className="text-base font-medium text-[#494949]">
                        The values of each property are generated by a{" "}
                        <span className="text-MainBlue font-semibold">
                            generator function
                        </span>
                        . Select one of the four types of generator functions
                        from the dropdown menu on the left.
                    </p>
                    <p className="text-base font-medium text-[#494949]">
                        Each generator function comes with different user
                        defined characteristics.
                    </p>
                </div>
            </section>
            <button
                type="submit"
                onClick={handleNext}
                className="bg-black p-2 w-24 rounded-full font-semibold text-lg right-0 bottom-0 absolute mb-4 mr-8"
            >
                Next â€º
            </button>
        </div>
    );
};
export default PropertiesForm;

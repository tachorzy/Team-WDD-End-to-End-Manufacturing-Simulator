import React, { useContext } from "react";
// import Image from "next/image";
import PropertyInputColumn from "./PropertyInputColumn";
import AddPropertyButton from "./AddPropertyButton";
import { Context } from "../CreateModelForm";

interface AttributesFormContext {
    factoryId: string;
    modelId: string;
    attributes: { attribute: string; value: string }[];
    setAttributes: React.Dispatch<
        React.SetStateAction<{ attribute: string; value: string }[]>
    >;
    properties: { property: string; unit: string }[];
    setProperties: React.Dispatch<
        React.SetStateAction<{ property: string; unit: string }[]>
    >;
}

const AddPropertyForm = () => {
    const contextValue = useContext(Context) as AttributesFormContext;

    return (
        <div className="flex flex-row gap-x-24 mt-6 gap-y-2">
            <section>
                <div className="flex flex-col w-full gap-y-3">
                    <PropertyInputColumn
                        properties={contextValue?.properties}
                    />
                    <AddPropertyButton
                        setProperties={contextValue?.setProperties}
                    />
                </div>
            </section>
            <section className="flex flex-row w-[30%] gap-y-3 gap-x-4">
                <div className="flex flex-col gap-y-2">
                    <h1 className="text-xl font-semibold text-[#494949]">
                        Define your properties
                    </h1>
                    <p className="text-base font-medium text-[#494949]">
                        <span className="text-MainBlue font-semibold">
                            Properties
                        </span>{" "}
                        are qualities of a model with values that change in the
                        simulation. You can define properties with a type, unit,
                        and generator function.
                    </p>

                    <h1 className="text-xl font-semibold text-[#494949] mt-3">
                        Generator functions
                    </h1>
                    <p className="text-base font-medium text-[#494949]">
                        The values of each property are generated by a{" "}
                        <span className="text-MainBlue font-semibold">
                            generator function
                        </span>
                        . Select one of the four types of generator functions
                        from the dropdown menu on the left.
                    </p>
                    <p className="text-base font-medium text-[#494949]">
                        Each generator function comes with different user
                        defined characteristics.
                    </p>
                </div>
            </section>
        </div>
    );
};
export default AddPropertyForm;
